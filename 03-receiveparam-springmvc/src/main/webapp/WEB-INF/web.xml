<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
    <!--声明，注册springmvc的核心对象DispatcherServlet
        需要在Tomcat服务器启动后，创建DispatcherServlet对象的实例？
        因为DispatcherServlet在他的创建过程中，会同时创建springmvc容器对象
        读取springmvc的配置文件，把这个配置文件中的对象都创建好，当用户发起请求时，就可以直接使用对象了。

        servlet的初始化会执行init()方法。DispatcherServlet在init()中{
            //创建容器，读取配置文件
            WebApplicationContext context = new ClassPathXmlApplicationContext("spring.xml");
            //把容器对象放入到ServletContext中
            getServletContext().serAttribute(key,context);

        }

       Caused by: java.io.FileNotFoundException: Could not open ServletContext resource [/WEB-INF/springmvc-servlet.xml]
       启动Tomcat报错，读取这个文件 /WEB-INF/springmvc-servlet.xml
       springmvc创建容器对象时，读取的配置文件默认是/WEB-INF/<servlet-name>-servlet.xml
    -->
    <servlet>
        <servlet-name>springmvc</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

        <!--
           自定义springmvc读取的配置文件的位置
        -->
        <init-param>
            <!--springmvc的配置文件中的位置属性-->
            <param-name>contextConfigLocation</param-name>
            <!--指定自定义文件的位置,从类路径下开始-->
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>

        <!--
            在Tomcat启动之后，创建Servlet对象
            load-on-startup：表示Tomcat启动之后创建对象的顺序。它的值是整数，数值越小，
                            Tomcat创建对象的时间越早。大于等于0的整数
        -->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <!--
           使用框架的时候，url-pattern可以使用两种值
           1、使用扩展名的方式，语法： *.xxxx, xxxx是自定义的扩展名。
              常用的方式：*.do,*.action,*.mvc等等

           2、使用"/"
        -->
        <servlet-name>springmvc</servlet-name>
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>

    <!--注册声明过滤器，解决post请求中文乱码的问题-->
    <filter>
        <filter-name>characterEncodingFilter</filter-name>
        <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
        <!--1、设置项目中使用的字符编码-->
        <init-param>
            <param-name>encoding</param-name>
            <param-value>utf-8</param-value>
        </init-param>
        <!--强制请求对象(HttpServletRequest)使用encoding编码的值-->
        <init-param>
            <param-name>forceRequestEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
        <!--强制响应对象(HttpServletResponse)使用encoding编码的值-->
        <init-param>
            <param-name>forceResponseEncoding</param-name>
            <param-value>true</param-value>
        </init-param>
    </filter>
    <filter-mapping>
        <filter-name>characterEncodingFilter</filter-name>
        <!--/*  表示http://localhost:8080/工程路径下的所有请求都要经过过滤器-->
        <url-pattern>/*</url-pattern>
    </filter-mapping>

    <!-- 为什么要这样设置的原因：

    CharacterEncodingFilter部分源码解析

    doFilter方法调用了这个方法
    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {
        String encoding = this.getEncoding(); //utf-8
        if (encoding != null) {
            //isForceRequestEncoding()获取到forceRequestEncoding，该结果为true
            if (this.isForceRequestEncoding() || request.getCharacterEncoding() == null) {
                request.setCharacterEncoding(encoding); //设置成utf-8
            }

            //isForceResponseEncoding()获取到forceResponseEncoding，该结果为true
            if (this.isForceResponseEncoding()) {
                response.setCharacterEncoding(encoding); //设置成utf-8
            }
        }
        filterChain.doFilter(request, response);
    }
    -->

</web-app>