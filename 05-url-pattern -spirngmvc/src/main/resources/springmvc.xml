<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd">
       <!--开启组件扫描器-->
       <context:component-scan base-package="com.mrlu.springmvc.controller"></context:component-scan>

       <!--声明springmvc框架中的视图解析器，帮助开发人员设置视图文件的路径-->
       <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
              <!--前缀：视图文件的路径-->
              <property name="prefix" value="/WEB-INF/view/"></property>
              <!--后缀：视图文件的扩展名-->
              <property name="suffix" value=".jsp"></property>
       </bean>

       <!--
           第一种处理静态资源的方式：
           需要在springmvc配置文件中加入<mvc:default-servlet-handler>
           原理是：加入这个标签之后，框架会创建控制器对象DefaultServletHttpRequestHandler（类似我们直接创建的MyController）
                  DefaultServletHttpRequestHandler这个对象可以把接收请求转发给Tomcat的default这个servlet

           public void handleRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
               Assert.state(this.servletContext != null, "No ServletContext set");
               RequestDispatcher rd = this.servletContext.getNamedDispatcher(this.defaultServletName);
               if (rd == null) {
                   throw new IllegalStateException("A RequestDispatcher could not be located for the default servlet '" + this.defaultServletName + "'");
               } else {
                   rd.forward(request, response);  //请求转发给Tomcat的默认servlet
               }
           }
       -->
       <!--注意。default-servlet-handler和@RequestMapping注解 有冲突，
                 需要加入annotation-driven注解驱动，解决问题-->
       <!--<mvc:default-servlet-handler/>-->
       <!--
         加入注解驱动
         注意加入的是这个
         http://www.springframework.org/schema/mvc
      -->
       <!--<mvc:annotation-driven></mvc:annotation-driven>-->


       <!--
           第二种处理静态资源的方式
           mvc:resources 加入后框架会创建ResourceHttpRequestHandler这个处理器对象
           让这个对象处理静态资源的访问，不依赖Tomcat服务器
           mapping：访问静态资源的uri地址，使用通配符 **
           location：静态资源在你项目中的目录位置

           /images/** ：表示http://localhost:8080/工程路径/images/p1.jpg
                        或者：http://localhost:8080/工程路径/images/user/p1.jsp等等
                        即表示位于images目录下的所有资源
            /images/ 对应于工程目录webapp/images/目录下的内容
            其他的也是类似这样

            这种方式还是和@RequestMapping注解有冲突
       -->
       <!--<mvc:resources mapping="/images/**" location="/images/"></mvc:resources>
       <mvc:resources mapping="/html/**" location="/html/"></mvc:resources>
       <mvc:resources mapping="/lib/**" location="/lib/"></mvc:resources>-->

       <!--加上注解驱动-->
       <mvc:annotation-driven/>
       <!--通常我们都是把静态资源放到static目录下的-->
       <mvc:resources mapping="/static/**" location="/static/"/>
</beans>