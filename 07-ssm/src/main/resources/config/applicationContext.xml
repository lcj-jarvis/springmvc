<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       https://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd">

       <!--
          整合mybatis：
          目的：
          1、spring管理所有组件，mapper的实现类
             service==》Dao @Autowired：自动注入mapper
          2、spring用来管理事务，spring声明式事务
       -->

       <!--spring的配置文件，创建service，dao，工具类对象-->
       <!--1、声明数据源，连接数据库-->
       <context:property-placeholder location="classpath:config/jdbc.properties"/>
       <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
              <property name="driverClassName" value="${jdbc.driverClassName}"></property>
              <property name="url" value="${jdbc.url}"></property>
              <property name="username" value="${jdbc.username}"></property>
              <property name="password" value="${jdbc.password}"></property>
              <property name="maxActive" value="${jdbc.maxActive}"></property>
       </bean>

       <!--2、SqlSessionFactoryBean创建SqlSessionFactory-->
       <bean id="sqlSessionBeanFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
              <property name="dataSource" ref="dataSource"></property>
              <property name="configLocation" value="classpath:config/mybatis.xml"></property>
              <!--如果mybatis的配置文件中没有配置mappers。就可以在这里配置。【注意，但是不可以两个都配】
                 从类路径下开始
              -->
              <!--<property name="mapperLocations" value="classpath:com/mrlu/ssm/dao/*.xml"></property>-->
       </bean>

       <!--配置一个可以批量执行的sqlSession
           SqlSessionTemplate实现了SqlSession接口
       -->
       <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
              <constructor-arg name="sqlSessionFactory" ref="sqlSessionBeanFactory"></constructor-arg>
              <constructor-arg name="executorType" value="BATCH"></constructor-arg>
       </bean>

       <!--3、声明mybatis的扫描器，创建dao对象-->
       <!--第一种方式-->
       <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
              <property name="sqlSessionFactoryBeanName" value="sqlSessionBeanFactory"></property>
              <property name="basePackage" value="com.mrlu.ssm.dao"></property>
       </bean>

       <!--
            第二种方式
            base-package：指定Mapper接口的包名
       -->
       <!--<mybatis-spring:scan base-package="com.mrlu.ssm.dao"/>-->

       <!--
          问题：若Spring的IOC容器和SpringMVC的IOC容器扫描的包有重合的部分，就会导致有的bean会被创建两次。
          解决：
          1、使Spring的IOC容器和SpringMVC的IOC容器扫描的包没有重合的部分。如
               Spring的IOC容器扫描Service包和dao包，SpringMVC容器扫描Controller包
          2、使用exclude-filter 和 include-filter 子节点来规定只能扫描的注解,和不扫描的注解

          【注意】SpringMVC的IOC容器中的Bean可以引用Spring IOC容器的Bean，
           反之，Spring 的IOC容器中的Bean不能引用SpringMVC IOC容器的Bean。
       -->

       <!--4、声明service的注解@Service所在的包名位置-->
       <!--第一种解决方式-->
       <context:component-scan base-package="com.mrlu.ssm.service"/>
       <!--第二种方式-->
       <!--<context:component-scan base-package="com.mrlu.ssm">
              <context:exclude-filter type="annotation"
                                      expression="org.springframework.stereotype.Controller"/>
              <context:exclude-filter type="annotation"
                                      expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
       </context:component-scan>-->

       <!--5、事务配置：注解的配置/aspectj的配置-->
       <!--使用spring的事务管理器-->
       <!--1、声明事务管理器-->
       <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
              <!--连接数据库，指定数据源-->
              <property name="dataSource" ref="dataSource"></property>
       </bean>
       <!--2、开始事务注解驱动，告诉spring使用注解管理事务，创建代理对象-->
       <!--spring-tx.xsd后缀是这个的-->
       <!--<tx:annotation-driven transaction-manager="transactionManager"></tx:annotation-driven>-->

       <!--使用配置的方式配置事务-->
       <aop:config>
              <!--切入点表达式-->
              <aop:pointcut id="txPoint" expression="execution(* com.mrlu.ssm.service..*(..))"/>
              <!--配置事务增强-->
              <aop:advisor advice-ref="txAdvice" pointcut-ref="txPoint"></aop:advisor>
       </aop:config>
       <!--配置事务增强【通知】.即事务如何切入。transaction-manager使用上面事务管理器的id值-->
       <tx:advice id="txAdvice" transaction-manager="transactionManager">
              <tx:attributes>
                     <!--如所有的方法-->
                     <tx:method name="*"/>
                     <!--以get开头的方法-->
                     <tx:method name="get*" read-only="true"></tx:method>
              </tx:attributes>
       </tx:advice>
</beans>